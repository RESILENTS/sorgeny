import telebot
import requests
import json
import sqlite3
import adminka
from telebot import types
from random import randint
from config import token

bot=telebot.TeleBot(token)
ADMIN = 641892529
in_admin = []

conn = sqlite3.connect('db.db', check_same_thread=False)
cursor = conn.cursor()

def db_table_val(user_id: int, user_name: str, user_surname: str, username: str):
	cursor.execute('INSERT INTO test (user_id, user_name, user_surname, username) VALUES (?, ?, ?, ?)', (user_id, user_name, user_surname, username))
	conn.commit()

kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É"))
kb.add(types.InlineKeyboardButton(text="üì• –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"))
kb.add(types.InlineKeyboardButton(text="üìã –†–∞—Å—Å—ã–ª–∫–∞"))

@bot.message_handler(commands=["start"])
def welcome(message):
if '/start' == message.text:
if message.chat.username:
if dop.get_sost(message.chat.id) is True: 
with shelve.open(files.sost_bd) as bd: del bd[str(message.chat.id)]
if message.chat.id in in_admin: in_admin.remove(message.chat.id)
if message.chat.id == config.admin_id and dop.it_first(message.chat.id) is True: in_admin.append(message.chat.id)
elif dop.it_first(message.chat.id) is True and message.chat.id not in dop.get_adminlist():
bot.send_message(message.chat.id, '–ë–æ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n–ï—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Ç–æ –≤–æ–π–¥–∏—Ç–µ –∏–∑ –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç—É, id –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –µ–≥–æ –∫ —Ä–∞–±–æ—Ç–µ!')
elif dop.check_message('start') is True:
key = telebot.types.InlineKeyboardMarkup()
key.add(telebot.types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä–æ–≤', callback_data='–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä–æ–≤'))
with shelve.open(files.bot_message_bd) as bd: start_message = bd['start']
start_message = start_message.replace('username', message.chat.username)
start_message = start_message.replace('name', message.from_user.first_name)
bot.send_message(message.chat.id, start_message, reply_markup=key)	
elif dop.check_message('start') is False and message.chat.id in dop.get_adminlist():
bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–ß—Ç–æ–±—ã –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /adm –∏ *–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞*', parse_mode='Markdown')

dop.user_loger(chat_id=message.chat.id) #–ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —é–∑–µ—Ä–æ–≤s
elif not message.chat.username:
with shelve.open(files.bot_message_bd) as bd: start_message = bd['userfalse']
start_message = start_message.replace('uname', message.from_user.first_name)
bot.send_message(message.chat.id, start_message, parse_mode='Markdown')
			
elif '/adm' == message.text:
if not message.chat.id in in_admin:  in_admin.append(message.chat.id)
adminka.in_adminka(message.chat.id, message.text, message.chat.username, message.from_user.first_name)

elif  message.chat.id in in_admin: adminka.in_adminka(message.chat.id, message.text, message.chat.username, message.from_user.first_name)



@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):  

    if message.text == "‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã":  
        keyboard = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text="üî© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã", callback_data="uabtn")
        btn2 = types.InlineKeyboardButton(text="‚õì –ß–µ–∫–µ—Ä—ã", callback_data="test")
        btn3 = types.InlineKeyboardButton(text="üì¢ –°–ø–∞–º, –§–ª—É–¥", callback_data="test")
        btn4 = types.InlineKeyboardButton(text="üî® –†–∞–∑–Ω—ã–µ", callback_data="test")
        keyboard.add(btn1, btn2)
        keyboard.add(btn3, btn4)
        bot.send_message(message.chat.id, "‚öô *–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –≤ —Ç–µ–Ω–µ–≤–æ–π —Å—Ñ–µ—Ä–µ.*\n\n*–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã* ‚Äî –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—á–µ–µ –ø–æ–ª–µ–∑–Ω–æ–µ.\n\n*–ß–µ–∫–µ—Ä—ã* ‚Äî –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —á–µ–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. \n\n*–°–ø–∞–º, —Ñ–ª—É–¥* ‚Äî –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–ø–∞–º–∞, —Ñ–ª—É–¥–∞ –ø–æ SMS, E-mail –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. \n\n*–†–∞–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã* ‚Äî –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤—ã—à–µ.", reply_markup=keyboard, parse_mode='Markdown')
	
    if message.text == "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":  
        keyboard = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text="üî© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã", callback_data="uabtn")
        btn2 = types.InlineKeyboardButton(text="‚õì –ß–µ–∫–µ—Ä—ã", callback_data="test")
        btn3 = types.InlineKeyboardButton(text="üì¢ –°–ø–∞–º, –§–ª—É–¥", callback_data="test")
        btn4 = types.InlineKeyboardButton(text="üî® –†–∞–∑–Ω—ã–µ", callback_data="test")
        keyboard.add(btn1, btn2)
        keyboard.add(btn3, btn4)
        bot.send_message(message.chat.id, "üîç *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö.* \n\n*¬´–ü—Ä–æ–±–∏–≤¬ª* ‚Äî —ç—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω–∞—è —É—Å–ª—É–≥–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞ –¥–µ–Ω—å–≥–∏. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã–ª–æ –±—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ –∏–Ω—Å–∞–π–¥–µ—Ä–æ–≤ ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π.", reply_markup=keyboard, parse_mode='Markdown')
	
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "uabtn":
            keyboard = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="uabtn1_1")
            btn2 = types.InlineKeyboardButton(text="üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª–∏–≤", callback_data="uabtn1_2")
            keyboard.add(btn1)
            keyboard.add(btn2)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìå –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.", reply_markup=keyboard, parse_mode='Markdown')

        if call.data == "uabtn1_1":
            uabtn1_1_message = bot.send_message(chat_id=call.message.chat.id, text="üì• *–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥ —Ö–∞–π–¥–æ–º.*\n\n‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ ID —Ç–µ–º—ã –Ω–∞ —Ñ–æ—Ä—É–º–µ –¥–ª—è —Å–ª–∏–≤–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–¥ —Ö–∞–π–¥–æ–º.", parse_mode='Markdown')
            bot.register_next_step_handler(uabtn1_1_message, auto_number_check)
		
        if call.data == "uabtn1_2":
            uabtn1_2_message = bot.send_message(chat_id=call.message.chat.id, text="üì§ *–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–∏–≤ —Ö–∞–π–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.*\n\n‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º —Ç–µ–º—É –¥–ª—è —Å–ª–∏–≤–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–¥ —Ö–∞–π–¥–æ–º.", parse_mode='Markdown')
            bot.register_next_step_handler(uabtn1_2_message, getcontact)
	
def getcontact(message):
    global ru_number_a
    ru_number_a = message.text
    response1 = requests.get('https://rosreestr.subnets.ru/?get=num&num=' + ru_number_a)
    data1 = response1.json()
    operator = data1["0"]["operator"]
    region1 = data1["0"]["region"]
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="uabtn1_2")
    keyboard.add(btn1)
    bot.send_message(message.chat.id, "*üöô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É: "+ru_number_a+"\n\n‚ñ™Ô∏è –û–ø–µ—Ä–∞—Ç–æ—Ä: "+operator+"\n‚ñ™Ô∏è –†–µ–≥–∏–æ–Ω: "+region1, reply_markup=keyboard, parse_mode='Markdown')
		
def auto_number_check(message):
    global auto_number_a
    auto_number_a = message.text
    response = requests.get('https://fakescreen-3d98a1.eu1.kinto.io/ua?num=' + auto_number_a)
    data = response.json()
    region = data["region"]["name"]
    marka = data["vendor"]
    model = data["model"]
    year = data["year"]
    zametki = data["operations"][0]["notes"]
    data_reg = data["operations"][0]["regAt"]
    address = data["operations"][0]["address"]
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="uabtn1_1")
    keyboard.add(btn1)
    bot.send_message(message.chat.id, "*‚Ñπ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –Ω–æ–º–µ—Ä—É: üá∫üá¶ "+auto_number_a+"*\n\n*‚ñ™Ô∏è –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:* " +marka+ "\nÔ∏è*‚ñ™Ô∏è –†–µ–≥–∏–æ–Ω —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏:* " +region+ "\n‚ñ™Ô∏è *–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:* " +model+ "\n*‚ñ™Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* " +zametki+ "\n*‚ñ™Ô∏è –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* " + data_reg, reply_markup=keyboard, parse_mode='Markdown')
        
bot.polling(none_stop=True)
